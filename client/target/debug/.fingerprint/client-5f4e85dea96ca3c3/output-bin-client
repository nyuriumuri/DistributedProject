{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/receiver.rs","byte_start":864,"byte_end":878,"line_start":28,"line_end":28,"column_start":25,"column_end":39,"is_primary":true,"text":[{"text":"                    let mut reply_addr = src_addr;","highlight_start":25,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/receiver.rs","byte_start":864,"byte_end":868,"line_start":28,"line_end":28,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"                    let mut reply_addr = src_addr;","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/receiver.rs:28:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut reply_addr = src_addr;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/receiver.rs","byte_start":980,"byte_end":991,"line_start":30,"line_end":30,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"                    let mut message = String::from(format!(\"Message Recieved By {}\", self.addr));","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/receiver.rs","byte_start":980,"byte_end":984,"line_start":30,"line_end":30,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"                    let mut message = String::from(format!(\"Message Recieved By {}\", self.addr));","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/receiver.rs:30:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut message = String::from(format!(\"Message Recieved By {}\", self.addr));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"borrowed data escapes outside of associated function","code":{"code":"E0521","explanation":"Borrowed data escapes outside of closure.\n\nErroneous code example:\n\n```compile_fail,E0521\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el: &str| {\n    list.push(el); // error: `el` escapes the closure body here\n};\n```\n\nA type annotation of a closure parameter implies a new lifetime declaration.\nConsider to drop it, the compiler is reliably able to infer them.\n\n```\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el| {\n    list.push(el);\n};\n```\n\nSee the [Closure type inference and annotation][closure-infere-annotation] and\n[Lifetime elision][lifetime-elision] sections of the Book for more details.\n\n[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html\n"},"level":"error","spans":[{"file_name":"src/sender.rs","byte_start":886,"byte_end":895,"line_start":32,"line_end":32,"column_start":17,"column_end":26,"is_primary":false,"text":[{"text":"    pub fn init(&mut self) -> thread::JoinHandle<()>{","highlight_start":17,"highlight_end":26}],"label":"`self` is a reference that is only valid in the associated function body","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/sender.rs","byte_start":939,"byte_end":1949,"line_start":33,"line_end":58,"column_start":16,"column_end":12,"is_primary":true,"text":[{"text":"        return thread::spawn(move || { ","highlight_start":16,"highlight_end":40},{"text":"            let buf : [u8;2]= [2, 0];","highlight_start":1,"highlight_end":38},{"text":"            self.socket.set_read_timeout(Some(time::Duration::from_secs(4))).unwrap();","highlight_start":1,"highlight_end":87},{"text":"            loop","highlight_start":1,"highlight_end":17},{"text":"            {   self.min_server_load = u16::MAX;","highlight_start":1,"highlight_end":49},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                for (i, server) in self.servers.iter().enumerate()","highlight_start":1,"highlight_end":67},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    self.socket.send_to(&buf, server).expect(\"Failed to send pulse\");","highlight_start":1,"highlight_end":86},{"text":"                    let mut recv_buf = [0; 2]; ","highlight_start":1,"highlight_end":48},{"text":"                    let recv_res = self.socket.recv_from(&mut recv_buf); ","highlight_start":1,"highlight_end":74},{"text":"                    match recv_res{","highlight_start":1,"highlight_end":36},{"text":"                        Ok((_,_)) => {","highlight_start":1,"highlight_end":39},{"text":"                            let val = u16::from_be_bytes(recv_buf);","highlight_start":1,"highlight_end":68},{"text":"                            if val < self.min_server_load{","highlight_start":1,"highlight_end":59},{"text":"                                self.min_server_load = val;","highlight_start":1,"highlight_end":60},{"text":"                                self.min_server = i as u16;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        Err(_) => ()","highlight_start":1,"highlight_end":37},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"         });","highlight_start":1,"highlight_end":12}],"label":"`self` escapes the associated function body here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/sender.rs","byte_start":886,"byte_end":887,"line_start":32,"line_end":32,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"    pub fn init(&mut self) -> thread::JoinHandle<()>{","highlight_start":17,"highlight_end":18}],"label":"let's call the lifetime of this reference `'1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/sender.rs","byte_start":939,"byte_end":1949,"line_start":33,"line_end":58,"column_start":16,"column_end":12,"is_primary":true,"text":[{"text":"        return thread::spawn(move || { ","highlight_start":16,"highlight_end":40},{"text":"            let buf : [u8;2]= [2, 0];","highlight_start":1,"highlight_end":38},{"text":"            self.socket.set_read_timeout(Some(time::Duration::from_secs(4))).unwrap();","highlight_start":1,"highlight_end":87},{"text":"            loop","highlight_start":1,"highlight_end":17},{"text":"            {   self.min_server_load = u16::MAX;","highlight_start":1,"highlight_end":49},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                for (i, server) in self.servers.iter().enumerate()","highlight_start":1,"highlight_end":67},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    self.socket.send_to(&buf, server).expect(\"Failed to send pulse\");","highlight_start":1,"highlight_end":86},{"text":"                    let mut recv_buf = [0; 2]; ","highlight_start":1,"highlight_end":48},{"text":"                    let recv_res = self.socket.recv_from(&mut recv_buf); ","highlight_start":1,"highlight_end":74},{"text":"                    match recv_res{","highlight_start":1,"highlight_end":36},{"text":"                        Ok((_,_)) => {","highlight_start":1,"highlight_end":39},{"text":"                            let val = u16::from_be_bytes(recv_buf);","highlight_start":1,"highlight_end":68},{"text":"                            if val < self.min_server_load{","highlight_start":1,"highlight_end":59},{"text":"                                self.min_server_load = val;","highlight_start":1,"highlight_end":60},{"text":"                                self.min_server = i as u16;","highlight_start":1,"highlight_end":60},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        Err(_) => ()","highlight_start":1,"highlight_end":37},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"         });","highlight_start":1,"highlight_end":12}],"label":"argument requires that `'1` must outlive `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0521]\u001b[0m\u001b[0m\u001b[1m: borrowed data escapes outside of associated function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/sender.rs:33:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub fn init(&mut self) -> thread::JoinHandle<()>{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`self` is a reference that is only valid in the associated function body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlet's call the lifetime of this reference `'1`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        return thread::spawn(move || { \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let buf : [u8;2]= [2, 0];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.socket.set_read_timeout(Some(time::Duration::from_secs(4))).unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            loop\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m         });\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|___________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`self` escapes the associated function body here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9margument requires that `'1` must outlive `'static`\u001b[0m\n\n"}
{"message":"aborting due to previous error; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error; 2 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0521`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0521`.\u001b[0m\n"}
